// -------------------------------------------------------------
//
// Module: LPF_20kHz_fs1_8MHz
// Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
// Generated on: 2023-08-03 18:18:13
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: LPF_20kHz_fs1_8MHz
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module LPF_20kHz_fs1_8MHz
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [13:0] filter_in; //sfix14
  output  signed [13:0] filter_out; //sfix14

////////////////////////////////////////////////////////////////
//Module Architecture: LPF_20kHz_fs1_8MHz
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [9:0] coeff1 = 10'b1111110011; //sfix10_En13
  parameter signed [9:0] coeff2 = 10'b1111111000; //sfix10_En13
  parameter signed [9:0] coeff3 = 10'b1111110110; //sfix10_En13
  parameter signed [9:0] coeff4 = 10'b1111110101; //sfix10_En13
  parameter signed [9:0] coeff5 = 10'b1111110011; //sfix10_En13
  parameter signed [9:0] coeff6 = 10'b1111110010; //sfix10_En13
  parameter signed [9:0] coeff7 = 10'b1111110001; //sfix10_En13
  parameter signed [9:0] coeff8 = 10'b1111110010; //sfix10_En13
  parameter signed [9:0] coeff9 = 10'b1111110011; //sfix10_En13
  parameter signed [9:0] coeff10 = 10'b1111110110; //sfix10_En13
  parameter signed [9:0] coeff11 = 10'b1111111011; //sfix10_En13
  parameter signed [9:0] coeff12 = 10'b0000000001; //sfix10_En13
  parameter signed [9:0] coeff13 = 10'b0000001001; //sfix10_En13
  parameter signed [9:0] coeff14 = 10'b0000010100; //sfix10_En13
  parameter signed [9:0] coeff15 = 10'b0000100000; //sfix10_En13
  parameter signed [9:0] coeff16 = 10'b0000101111; //sfix10_En13
  parameter signed [9:0] coeff17 = 10'b0001000000; //sfix10_En13
  parameter signed [9:0] coeff18 = 10'b0001010011; //sfix10_En13
  parameter signed [9:0] coeff19 = 10'b0001101001; //sfix10_En13
  parameter signed [9:0] coeff20 = 10'b0010000000; //sfix10_En13
  parameter signed [9:0] coeff21 = 10'b0010011000; //sfix10_En13
  parameter signed [9:0] coeff22 = 10'b0010110010; //sfix10_En13
  parameter signed [9:0] coeff23 = 10'b0011001100; //sfix10_En13
  parameter signed [9:0] coeff24 = 10'b0011100111; //sfix10_En13
  parameter signed [9:0] coeff25 = 10'b0100000001; //sfix10_En13
  parameter signed [9:0] coeff26 = 10'b0100011010; //sfix10_En13
  parameter signed [9:0] coeff27 = 10'b0100110010; //sfix10_En13
  parameter signed [9:0] coeff28 = 10'b0101001000; //sfix10_En13
  parameter signed [9:0] coeff29 = 10'b0101011011; //sfix10_En13
  parameter signed [9:0] coeff30 = 10'b0101101100; //sfix10_En13
  parameter signed [9:0] coeff31 = 10'b0101111001; //sfix10_En13
  parameter signed [9:0] coeff32 = 10'b0110000011; //sfix10_En13
  parameter signed [9:0] coeff33 = 10'b0110001001; //sfix10_En13
  parameter signed [9:0] coeff34 = 10'b0110001011; //sfix10_En13
  parameter signed [9:0] coeff35 = 10'b0110001001; //sfix10_En13
  parameter signed [9:0] coeff36 = 10'b0110000011; //sfix10_En13
  parameter signed [9:0] coeff37 = 10'b0101111001; //sfix10_En13
  parameter signed [9:0] coeff38 = 10'b0101101100; //sfix10_En13
  parameter signed [9:0] coeff39 = 10'b0101011011; //sfix10_En13
  parameter signed [9:0] coeff40 = 10'b0101001000; //sfix10_En13
  parameter signed [9:0] coeff41 = 10'b0100110010; //sfix10_En13
  parameter signed [9:0] coeff42 = 10'b0100011010; //sfix10_En13
  parameter signed [9:0] coeff43 = 10'b0100000001; //sfix10_En13
  parameter signed [9:0] coeff44 = 10'b0011100111; //sfix10_En13
  parameter signed [9:0] coeff45 = 10'b0011001100; //sfix10_En13
  parameter signed [9:0] coeff46 = 10'b0010110010; //sfix10_En13
  parameter signed [9:0] coeff47 = 10'b0010011000; //sfix10_En13
  parameter signed [9:0] coeff48 = 10'b0010000000; //sfix10_En13
  parameter signed [9:0] coeff49 = 10'b0001101001; //sfix10_En13
  parameter signed [9:0] coeff50 = 10'b0001010011; //sfix10_En13
  parameter signed [9:0] coeff51 = 10'b0001000000; //sfix10_En13
  parameter signed [9:0] coeff52 = 10'b0000101111; //sfix10_En13
  parameter signed [9:0] coeff53 = 10'b0000100000; //sfix10_En13
  parameter signed [9:0] coeff54 = 10'b0000010100; //sfix10_En13
  parameter signed [9:0] coeff55 = 10'b0000001001; //sfix10_En13
  parameter signed [9:0] coeff56 = 10'b0000000001; //sfix10_En13
  parameter signed [9:0] coeff57 = 10'b1111111011; //sfix10_En13
  parameter signed [9:0] coeff58 = 10'b1111110110; //sfix10_En13
  parameter signed [9:0] coeff59 = 10'b1111110011; //sfix10_En13
  parameter signed [9:0] coeff60 = 10'b1111110010; //sfix10_En13
  parameter signed [9:0] coeff61 = 10'b1111110001; //sfix10_En13
  parameter signed [9:0] coeff62 = 10'b1111110010; //sfix10_En13
  parameter signed [9:0] coeff63 = 10'b1111110011; //sfix10_En13
  parameter signed [9:0] coeff64 = 10'b1111110101; //sfix10_En13
  parameter signed [9:0] coeff65 = 10'b1111110110; //sfix10_En13
  parameter signed [9:0] coeff66 = 10'b1111111000; //sfix10_En13
  parameter signed [9:0] coeff67 = 10'b1111110011; //sfix10_En13

  // Signals
  reg  signed [13:0] delay_pipeline [0:66] ; // sfix14
  wire signed [31:0] product67; // sfix32_En10
  wire signed [23:0] mul_temp; // sfix24_En13
  wire signed [31:0] product66; // sfix32_En10
  wire signed [14:0] mulpwr2_temp; // sfix15
  wire signed [31:0] product65; // sfix32_En10
  wire signed [23:0] mul_temp_1; // sfix24_En13
  wire signed [31:0] product64; // sfix32_En10
  wire signed [23:0] mul_temp_2; // sfix24_En13
  wire signed [31:0] product63; // sfix32_En10
  wire signed [23:0] mul_temp_3; // sfix24_En13
  wire signed [31:0] product62; // sfix32_En10
  wire signed [23:0] mul_temp_4; // sfix24_En13
  wire signed [31:0] product61; // sfix32_En10
  wire signed [23:0] mul_temp_5; // sfix24_En13
  wire signed [31:0] product60; // sfix32_En10
  wire signed [23:0] mul_temp_6; // sfix24_En13
  wire signed [31:0] product59; // sfix32_En10
  wire signed [23:0] mul_temp_7; // sfix24_En13
  wire signed [31:0] product58; // sfix32_En10
  wire signed [23:0] mul_temp_8; // sfix24_En13
  wire signed [31:0] product57; // sfix32_En10
  wire signed [23:0] mul_temp_9; // sfix24_En13
  wire signed [31:0] product56; // sfix32_En10
  wire signed [31:0] product55; // sfix32_En10
  wire signed [23:0] mul_temp_10; // sfix24_En13
  wire signed [31:0] product54; // sfix32_En10
  wire signed [23:0] mul_temp_11; // sfix24_En13
  wire signed [31:0] product53; // sfix32_En10
  wire signed [31:0] product52; // sfix32_En10
  wire signed [23:0] mul_temp_12; // sfix24_En13
  wire signed [31:0] product51; // sfix32_En10
  wire signed [31:0] product50; // sfix32_En10
  wire signed [23:0] mul_temp_13; // sfix24_En13
  wire signed [31:0] product49; // sfix32_En10
  wire signed [23:0] mul_temp_14; // sfix24_En13
  wire signed [31:0] product48; // sfix32_En10
  wire signed [31:0] product47; // sfix32_En10
  wire signed [23:0] mul_temp_15; // sfix24_En13
  wire signed [31:0] product46; // sfix32_En10
  wire signed [23:0] mul_temp_16; // sfix24_En13
  wire signed [31:0] product45; // sfix32_En10
  wire signed [23:0] mul_temp_17; // sfix24_En13
  wire signed [31:0] product44; // sfix32_En10
  wire signed [23:0] mul_temp_18; // sfix24_En13
  wire signed [31:0] product43; // sfix32_En10
  wire signed [23:0] mul_temp_19; // sfix24_En13
  wire signed [31:0] product42; // sfix32_En10
  wire signed [23:0] mul_temp_20; // sfix24_En13
  wire signed [31:0] product41; // sfix32_En10
  wire signed [23:0] mul_temp_21; // sfix24_En13
  wire signed [31:0] product40; // sfix32_En10
  wire signed [23:0] mul_temp_22; // sfix24_En13
  wire signed [31:0] product39; // sfix32_En10
  wire signed [23:0] mul_temp_23; // sfix24_En13
  wire signed [31:0] product38; // sfix32_En10
  wire signed [23:0] mul_temp_24; // sfix24_En13
  wire signed [31:0] product37; // sfix32_En10
  wire signed [23:0] mul_temp_25; // sfix24_En13
  wire signed [31:0] product36; // sfix32_En10
  wire signed [23:0] mul_temp_26; // sfix24_En13
  wire signed [31:0] product35; // sfix32_En10
  wire signed [23:0] mul_temp_27; // sfix24_En13
  wire signed [31:0] product34; // sfix32_En10
  wire signed [23:0] mul_temp_28; // sfix24_En13
  wire signed [31:0] product33; // sfix32_En10
  wire signed [23:0] mul_temp_29; // sfix24_En13
  wire signed [31:0] product32; // sfix32_En10
  wire signed [23:0] mul_temp_30; // sfix24_En13
  wire signed [31:0] product31; // sfix32_En10
  wire signed [23:0] mul_temp_31; // sfix24_En13
  wire signed [31:0] product30; // sfix32_En10
  wire signed [23:0] mul_temp_32; // sfix24_En13
  wire signed [31:0] product29; // sfix32_En10
  wire signed [23:0] mul_temp_33; // sfix24_En13
  wire signed [31:0] product28; // sfix32_En10
  wire signed [23:0] mul_temp_34; // sfix24_En13
  wire signed [31:0] product27; // sfix32_En10
  wire signed [23:0] mul_temp_35; // sfix24_En13
  wire signed [31:0] product26; // sfix32_En10
  wire signed [23:0] mul_temp_36; // sfix24_En13
  wire signed [31:0] product25; // sfix32_En10
  wire signed [23:0] mul_temp_37; // sfix24_En13
  wire signed [31:0] product24; // sfix32_En10
  wire signed [23:0] mul_temp_38; // sfix24_En13
  wire signed [31:0] product23; // sfix32_En10
  wire signed [23:0] mul_temp_39; // sfix24_En13
  wire signed [31:0] product22; // sfix32_En10
  wire signed [23:0] mul_temp_40; // sfix24_En13
  wire signed [31:0] product21; // sfix32_En10
  wire signed [23:0] mul_temp_41; // sfix24_En13
  wire signed [31:0] product20; // sfix32_En10
  wire signed [31:0] product19; // sfix32_En10
  wire signed [23:0] mul_temp_42; // sfix24_En13
  wire signed [31:0] product18; // sfix32_En10
  wire signed [23:0] mul_temp_43; // sfix24_En13
  wire signed [31:0] product17; // sfix32_En10
  wire signed [31:0] product16; // sfix32_En10
  wire signed [23:0] mul_temp_44; // sfix24_En13
  wire signed [31:0] product15; // sfix32_En10
  wire signed [31:0] product14; // sfix32_En10
  wire signed [23:0] mul_temp_45; // sfix24_En13
  wire signed [31:0] product13; // sfix32_En10
  wire signed [23:0] mul_temp_46; // sfix24_En13
  wire signed [31:0] product12; // sfix32_En10
  wire signed [31:0] product11; // sfix32_En10
  wire signed [23:0] mul_temp_47; // sfix24_En13
  wire signed [31:0] product10; // sfix32_En10
  wire signed [23:0] mul_temp_48; // sfix24_En13
  wire signed [31:0] product9; // sfix32_En10
  wire signed [23:0] mul_temp_49; // sfix24_En13
  wire signed [31:0] product8; // sfix32_En10
  wire signed [23:0] mul_temp_50; // sfix24_En13
  wire signed [31:0] product7; // sfix32_En10
  wire signed [23:0] mul_temp_51; // sfix24_En13
  wire signed [31:0] product6; // sfix32_En10
  wire signed [23:0] mul_temp_52; // sfix24_En13
  wire signed [31:0] product5; // sfix32_En10
  wire signed [23:0] mul_temp_53; // sfix24_En13
  wire signed [31:0] product4; // sfix32_En10
  wire signed [23:0] mul_temp_54; // sfix24_En13
  wire signed [31:0] product3; // sfix32_En10
  wire signed [23:0] mul_temp_55; // sfix24_En13
  wire signed [31:0] product2; // sfix32_En10
  wire signed [14:0] mulpwr2_temp_1; // sfix15
  wire signed [31:0] product1_cast; // sfix32_En10
  wire signed [31:0] product1; // sfix32_En10
  wire signed [23:0] mul_temp_56; // sfix24_En13
  wire signed [31:0] sum1; // sfix32_En10
  wire signed [31:0] add_signext; // sfix32_En10
  wire signed [31:0] add_signext_1; // sfix32_En10
  wire signed [32:0] add_temp; // sfix33_En10
  wire signed [31:0] sum2; // sfix32_En10
  wire signed [31:0] add_signext_2; // sfix32_En10
  wire signed [31:0] add_signext_3; // sfix32_En10
  wire signed [32:0] add_temp_1; // sfix33_En10
  wire signed [31:0] sum3; // sfix32_En10
  wire signed [31:0] add_signext_4; // sfix32_En10
  wire signed [31:0] add_signext_5; // sfix32_En10
  wire signed [32:0] add_temp_2; // sfix33_En10
  wire signed [31:0] sum4; // sfix32_En10
  wire signed [31:0] add_signext_6; // sfix32_En10
  wire signed [31:0] add_signext_7; // sfix32_En10
  wire signed [32:0] add_temp_3; // sfix33_En10
  wire signed [31:0] sum5; // sfix32_En10
  wire signed [31:0] add_signext_8; // sfix32_En10
  wire signed [31:0] add_signext_9; // sfix32_En10
  wire signed [32:0] add_temp_4; // sfix33_En10
  wire signed [31:0] sum6; // sfix32_En10
  wire signed [31:0] add_signext_10; // sfix32_En10
  wire signed [31:0] add_signext_11; // sfix32_En10
  wire signed [32:0] add_temp_5; // sfix33_En10
  wire signed [31:0] sum7; // sfix32_En10
  wire signed [31:0] add_signext_12; // sfix32_En10
  wire signed [31:0] add_signext_13; // sfix32_En10
  wire signed [32:0] add_temp_6; // sfix33_En10
  wire signed [31:0] sum8; // sfix32_En10
  wire signed [31:0] add_signext_14; // sfix32_En10
  wire signed [31:0] add_signext_15; // sfix32_En10
  wire signed [32:0] add_temp_7; // sfix33_En10
  wire signed [31:0] sum9; // sfix32_En10
  wire signed [31:0] add_signext_16; // sfix32_En10
  wire signed [31:0] add_signext_17; // sfix32_En10
  wire signed [32:0] add_temp_8; // sfix33_En10
  wire signed [31:0] sum10; // sfix32_En10
  wire signed [31:0] add_signext_18; // sfix32_En10
  wire signed [31:0] add_signext_19; // sfix32_En10
  wire signed [32:0] add_temp_9; // sfix33_En10
  wire signed [31:0] sum11; // sfix32_En10
  wire signed [31:0] add_signext_20; // sfix32_En10
  wire signed [31:0] add_signext_21; // sfix32_En10
  wire signed [32:0] add_temp_10; // sfix33_En10
  wire signed [31:0] sum12; // sfix32_En10
  wire signed [31:0] add_signext_22; // sfix32_En10
  wire signed [31:0] add_signext_23; // sfix32_En10
  wire signed [32:0] add_temp_11; // sfix33_En10
  wire signed [31:0] sum13; // sfix32_En10
  wire signed [31:0] add_signext_24; // sfix32_En10
  wire signed [31:0] add_signext_25; // sfix32_En10
  wire signed [32:0] add_temp_12; // sfix33_En10
  wire signed [31:0] sum14; // sfix32_En10
  wire signed [31:0] add_signext_26; // sfix32_En10
  wire signed [31:0] add_signext_27; // sfix32_En10
  wire signed [32:0] add_temp_13; // sfix33_En10
  wire signed [31:0] sum15; // sfix32_En10
  wire signed [31:0] add_signext_28; // sfix32_En10
  wire signed [31:0] add_signext_29; // sfix32_En10
  wire signed [32:0] add_temp_14; // sfix33_En10
  wire signed [31:0] sum16; // sfix32_En10
  wire signed [31:0] add_signext_30; // sfix32_En10
  wire signed [31:0] add_signext_31; // sfix32_En10
  wire signed [32:0] add_temp_15; // sfix33_En10
  wire signed [31:0] sum17; // sfix32_En10
  wire signed [31:0] add_signext_32; // sfix32_En10
  wire signed [31:0] add_signext_33; // sfix32_En10
  wire signed [32:0] add_temp_16; // sfix33_En10
  wire signed [31:0] sum18; // sfix32_En10
  wire signed [31:0] add_signext_34; // sfix32_En10
  wire signed [31:0] add_signext_35; // sfix32_En10
  wire signed [32:0] add_temp_17; // sfix33_En10
  wire signed [31:0] sum19; // sfix32_En10
  wire signed [31:0] add_signext_36; // sfix32_En10
  wire signed [31:0] add_signext_37; // sfix32_En10
  wire signed [32:0] add_temp_18; // sfix33_En10
  wire signed [31:0] sum20; // sfix32_En10
  wire signed [31:0] add_signext_38; // sfix32_En10
  wire signed [31:0] add_signext_39; // sfix32_En10
  wire signed [32:0] add_temp_19; // sfix33_En10
  wire signed [31:0] sum21; // sfix32_En10
  wire signed [31:0] add_signext_40; // sfix32_En10
  wire signed [31:0] add_signext_41; // sfix32_En10
  wire signed [32:0] add_temp_20; // sfix33_En10
  wire signed [31:0] sum22; // sfix32_En10
  wire signed [31:0] add_signext_42; // sfix32_En10
  wire signed [31:0] add_signext_43; // sfix32_En10
  wire signed [32:0] add_temp_21; // sfix33_En10
  wire signed [31:0] sum23; // sfix32_En10
  wire signed [31:0] add_signext_44; // sfix32_En10
  wire signed [31:0] add_signext_45; // sfix32_En10
  wire signed [32:0] add_temp_22; // sfix33_En10
  wire signed [31:0] sum24; // sfix32_En10
  wire signed [31:0] add_signext_46; // sfix32_En10
  wire signed [31:0] add_signext_47; // sfix32_En10
  wire signed [32:0] add_temp_23; // sfix33_En10
  wire signed [31:0] sum25; // sfix32_En10
  wire signed [31:0] add_signext_48; // sfix32_En10
  wire signed [31:0] add_signext_49; // sfix32_En10
  wire signed [32:0] add_temp_24; // sfix33_En10
  wire signed [31:0] sum26; // sfix32_En10
  wire signed [31:0] add_signext_50; // sfix32_En10
  wire signed [31:0] add_signext_51; // sfix32_En10
  wire signed [32:0] add_temp_25; // sfix33_En10
  wire signed [31:0] sum27; // sfix32_En10
  wire signed [31:0] add_signext_52; // sfix32_En10
  wire signed [31:0] add_signext_53; // sfix32_En10
  wire signed [32:0] add_temp_26; // sfix33_En10
  wire signed [31:0] sum28; // sfix32_En10
  wire signed [31:0] add_signext_54; // sfix32_En10
  wire signed [31:0] add_signext_55; // sfix32_En10
  wire signed [32:0] add_temp_27; // sfix33_En10
  wire signed [31:0] sum29; // sfix32_En10
  wire signed [31:0] add_signext_56; // sfix32_En10
  wire signed [31:0] add_signext_57; // sfix32_En10
  wire signed [32:0] add_temp_28; // sfix33_En10
  wire signed [31:0] sum30; // sfix32_En10
  wire signed [31:0] add_signext_58; // sfix32_En10
  wire signed [31:0] add_signext_59; // sfix32_En10
  wire signed [32:0] add_temp_29; // sfix33_En10
  wire signed [31:0] sum31; // sfix32_En10
  wire signed [31:0] add_signext_60; // sfix32_En10
  wire signed [31:0] add_signext_61; // sfix32_En10
  wire signed [32:0] add_temp_30; // sfix33_En10
  wire signed [31:0] sum32; // sfix32_En10
  wire signed [31:0] add_signext_62; // sfix32_En10
  wire signed [31:0] add_signext_63; // sfix32_En10
  wire signed [32:0] add_temp_31; // sfix33_En10
  wire signed [31:0] sum33; // sfix32_En10
  wire signed [31:0] add_signext_64; // sfix32_En10
  wire signed [31:0] add_signext_65; // sfix32_En10
  wire signed [32:0] add_temp_32; // sfix33_En10
  wire signed [31:0] sum34; // sfix32_En10
  wire signed [31:0] add_signext_66; // sfix32_En10
  wire signed [31:0] add_signext_67; // sfix32_En10
  wire signed [32:0] add_temp_33; // sfix33_En10
  wire signed [31:0] sum35; // sfix32_En10
  wire signed [31:0] add_signext_68; // sfix32_En10
  wire signed [31:0] add_signext_69; // sfix32_En10
  wire signed [32:0] add_temp_34; // sfix33_En10
  wire signed [31:0] sum36; // sfix32_En10
  wire signed [31:0] add_signext_70; // sfix32_En10
  wire signed [31:0] add_signext_71; // sfix32_En10
  wire signed [32:0] add_temp_35; // sfix33_En10
  wire signed [31:0] sum37; // sfix32_En10
  wire signed [31:0] add_signext_72; // sfix32_En10
  wire signed [31:0] add_signext_73; // sfix32_En10
  wire signed [32:0] add_temp_36; // sfix33_En10
  wire signed [31:0] sum38; // sfix32_En10
  wire signed [31:0] add_signext_74; // sfix32_En10
  wire signed [31:0] add_signext_75; // sfix32_En10
  wire signed [32:0] add_temp_37; // sfix33_En10
  wire signed [31:0] sum39; // sfix32_En10
  wire signed [31:0] add_signext_76; // sfix32_En10
  wire signed [31:0] add_signext_77; // sfix32_En10
  wire signed [32:0] add_temp_38; // sfix33_En10
  wire signed [31:0] sum40; // sfix32_En10
  wire signed [31:0] add_signext_78; // sfix32_En10
  wire signed [31:0] add_signext_79; // sfix32_En10
  wire signed [32:0] add_temp_39; // sfix33_En10
  wire signed [31:0] sum41; // sfix32_En10
  wire signed [31:0] add_signext_80; // sfix32_En10
  wire signed [31:0] add_signext_81; // sfix32_En10
  wire signed [32:0] add_temp_40; // sfix33_En10
  wire signed [31:0] sum42; // sfix32_En10
  wire signed [31:0] add_signext_82; // sfix32_En10
  wire signed [31:0] add_signext_83; // sfix32_En10
  wire signed [32:0] add_temp_41; // sfix33_En10
  wire signed [31:0] sum43; // sfix32_En10
  wire signed [31:0] add_signext_84; // sfix32_En10
  wire signed [31:0] add_signext_85; // sfix32_En10
  wire signed [32:0] add_temp_42; // sfix33_En10
  wire signed [31:0] sum44; // sfix32_En10
  wire signed [31:0] add_signext_86; // sfix32_En10
  wire signed [31:0] add_signext_87; // sfix32_En10
  wire signed [32:0] add_temp_43; // sfix33_En10
  wire signed [31:0] sum45; // sfix32_En10
  wire signed [31:0] add_signext_88; // sfix32_En10
  wire signed [31:0] add_signext_89; // sfix32_En10
  wire signed [32:0] add_temp_44; // sfix33_En10
  wire signed [31:0] sum46; // sfix32_En10
  wire signed [31:0] add_signext_90; // sfix32_En10
  wire signed [31:0] add_signext_91; // sfix32_En10
  wire signed [32:0] add_temp_45; // sfix33_En10
  wire signed [31:0] sum47; // sfix32_En10
  wire signed [31:0] add_signext_92; // sfix32_En10
  wire signed [31:0] add_signext_93; // sfix32_En10
  wire signed [32:0] add_temp_46; // sfix33_En10
  wire signed [31:0] sum48; // sfix32_En10
  wire signed [31:0] add_signext_94; // sfix32_En10
  wire signed [31:0] add_signext_95; // sfix32_En10
  wire signed [32:0] add_temp_47; // sfix33_En10
  wire signed [31:0] sum49; // sfix32_En10
  wire signed [31:0] add_signext_96; // sfix32_En10
  wire signed [31:0] add_signext_97; // sfix32_En10
  wire signed [32:0] add_temp_48; // sfix33_En10
  wire signed [31:0] sum50; // sfix32_En10
  wire signed [31:0] add_signext_98; // sfix32_En10
  wire signed [31:0] add_signext_99; // sfix32_En10
  wire signed [32:0] add_temp_49; // sfix33_En10
  wire signed [31:0] sum51; // sfix32_En10
  wire signed [31:0] add_signext_100; // sfix32_En10
  wire signed [31:0] add_signext_101; // sfix32_En10
  wire signed [32:0] add_temp_50; // sfix33_En10
  wire signed [31:0] sum52; // sfix32_En10
  wire signed [31:0] add_signext_102; // sfix32_En10
  wire signed [31:0] add_signext_103; // sfix32_En10
  wire signed [32:0] add_temp_51; // sfix33_En10
  wire signed [31:0] sum53; // sfix32_En10
  wire signed [31:0] add_signext_104; // sfix32_En10
  wire signed [31:0] add_signext_105; // sfix32_En10
  wire signed [32:0] add_temp_52; // sfix33_En10
  wire signed [31:0] sum54; // sfix32_En10
  wire signed [31:0] add_signext_106; // sfix32_En10
  wire signed [31:0] add_signext_107; // sfix32_En10
  wire signed [32:0] add_temp_53; // sfix33_En10
  wire signed [31:0] sum55; // sfix32_En10
  wire signed [31:0] add_signext_108; // sfix32_En10
  wire signed [31:0] add_signext_109; // sfix32_En10
  wire signed [32:0] add_temp_54; // sfix33_En10
  wire signed [31:0] sum56; // sfix32_En10
  wire signed [31:0] add_signext_110; // sfix32_En10
  wire signed [31:0] add_signext_111; // sfix32_En10
  wire signed [32:0] add_temp_55; // sfix33_En10
  wire signed [31:0] sum57; // sfix32_En10
  wire signed [31:0] add_signext_112; // sfix32_En10
  wire signed [31:0] add_signext_113; // sfix32_En10
  wire signed [32:0] add_temp_56; // sfix33_En10
  wire signed [31:0] sum58; // sfix32_En10
  wire signed [31:0] add_signext_114; // sfix32_En10
  wire signed [31:0] add_signext_115; // sfix32_En10
  wire signed [32:0] add_temp_57; // sfix33_En10
  wire signed [31:0] sum59; // sfix32_En10
  wire signed [31:0] add_signext_116; // sfix32_En10
  wire signed [31:0] add_signext_117; // sfix32_En10
  wire signed [32:0] add_temp_58; // sfix33_En10
  wire signed [31:0] sum60; // sfix32_En10
  wire signed [31:0] add_signext_118; // sfix32_En10
  wire signed [31:0] add_signext_119; // sfix32_En10
  wire signed [32:0] add_temp_59; // sfix33_En10
  wire signed [31:0] sum61; // sfix32_En10
  wire signed [31:0] add_signext_120; // sfix32_En10
  wire signed [31:0] add_signext_121; // sfix32_En10
  wire signed [32:0] add_temp_60; // sfix33_En10
  wire signed [31:0] sum62; // sfix32_En10
  wire signed [31:0] add_signext_122; // sfix32_En10
  wire signed [31:0] add_signext_123; // sfix32_En10
  wire signed [32:0] add_temp_61; // sfix33_En10
  wire signed [31:0] sum63; // sfix32_En10
  wire signed [31:0] add_signext_124; // sfix32_En10
  wire signed [31:0] add_signext_125; // sfix32_En10
  wire signed [32:0] add_temp_62; // sfix33_En10
  wire signed [31:0] sum64; // sfix32_En10
  wire signed [31:0] add_signext_126; // sfix32_En10
  wire signed [31:0] add_signext_127; // sfix32_En10
  wire signed [32:0] add_temp_63; // sfix33_En10
  wire signed [31:0] sum65; // sfix32_En10
  wire signed [31:0] add_signext_128; // sfix32_En10
  wire signed [31:0] add_signext_129; // sfix32_En10
  wire signed [32:0] add_temp_64; // sfix33_En10
  wire signed [31:0] sum66; // sfix32_En10
  wire signed [31:0] add_signext_130; // sfix32_En10
  wire signed [31:0] add_signext_131; // sfix32_En10
  wire signed [32:0] add_temp_65; // sfix33_En10
  wire signed [13:0] output_typeconvert; // sfix14
  reg  signed [13:0] output_register; // sfix14

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
        delay_pipeline[66] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[66] * coeff67;
  assign product67 = ({{11{mul_temp[23]}}, mul_temp[23:0]} + {mul_temp[3], {2{~mul_temp[3]}}})>>>3;

  assign mulpwr2_temp = (delay_pipeline[65]==14'b10000000000000) ? $signed({1'b0, delay_pipeline[65]}) : -delay_pipeline[65];

  assign product66 = $signed({{17{mulpwr2_temp[14]}}, mulpwr2_temp});

  assign mul_temp_1 = delay_pipeline[64] * coeff65;
  assign product65 = ({{11{mul_temp_1[23]}}, mul_temp_1[23:0]} + {mul_temp_1[3], {2{~mul_temp_1[3]}}})>>>3;

  assign mul_temp_2 = delay_pipeline[63] * coeff64;
  assign product64 = ({{11{mul_temp_2[23]}}, mul_temp_2[23:0]} + {mul_temp_2[3], {2{~mul_temp_2[3]}}})>>>3;

  assign mul_temp_3 = delay_pipeline[62] * coeff63;
  assign product63 = ({{11{mul_temp_3[23]}}, mul_temp_3[23:0]} + {mul_temp_3[3], {2{~mul_temp_3[3]}}})>>>3;

  assign mul_temp_4 = delay_pipeline[61] * coeff62;
  assign product62 = ({{11{mul_temp_4[23]}}, mul_temp_4[23:0]} + {mul_temp_4[3], {2{~mul_temp_4[3]}}})>>>3;

  assign mul_temp_5 = delay_pipeline[60] * coeff61;
  assign product61 = ({{11{mul_temp_5[23]}}, mul_temp_5[23:0]} + {mul_temp_5[3], {2{~mul_temp_5[3]}}})>>>3;

  assign mul_temp_6 = delay_pipeline[59] * coeff60;
  assign product60 = ({{11{mul_temp_6[23]}}, mul_temp_6[23:0]} + {mul_temp_6[3], {2{~mul_temp_6[3]}}})>>>3;

  assign mul_temp_7 = delay_pipeline[58] * coeff59;
  assign product59 = ({{11{mul_temp_7[23]}}, mul_temp_7[23:0]} + {mul_temp_7[3], {2{~mul_temp_7[3]}}})>>>3;

  assign mul_temp_8 = delay_pipeline[57] * coeff58;
  assign product58 = ({{11{mul_temp_8[23]}}, mul_temp_8[23:0]} + {mul_temp_8[3], {2{~mul_temp_8[3]}}})>>>3;

  assign mul_temp_9 = delay_pipeline[56] * coeff57;
  assign product57 = ({{11{mul_temp_9[23]}}, mul_temp_9[23:0]} + {mul_temp_9[3], {2{~mul_temp_9[3]}}})>>>3;

  assign product56 = ({{21{delay_pipeline[55][13]}}, delay_pipeline[55][13:0]} + {delay_pipeline[55][3], {2{~delay_pipeline[55][3]}}})>>>3;

  assign mul_temp_10 = delay_pipeline[54] * coeff55;
  assign product55 = ({{11{mul_temp_10[23]}}, mul_temp_10[23:0]} + {mul_temp_10[3], {2{~mul_temp_10[3]}}})>>>3;

  assign mul_temp_11 = delay_pipeline[53] * coeff54;
  assign product54 = ({{11{mul_temp_11[23]}}, mul_temp_11[23:0]} + {mul_temp_11[3], {2{~mul_temp_11[3]}}})>>>3;

  assign product53 = $signed({delay_pipeline[52][13:0], 2'b00});

  assign mul_temp_12 = delay_pipeline[51] * coeff52;
  assign product52 = ({{11{mul_temp_12[23]}}, mul_temp_12[23:0]} + {mul_temp_12[3], {2{~mul_temp_12[3]}}})>>>3;

  assign product51 = $signed({delay_pipeline[50][13:0], 3'b000});

  assign mul_temp_13 = delay_pipeline[49] * coeff50;
  assign product50 = ({{11{mul_temp_13[23]}}, mul_temp_13[23:0]} + {mul_temp_13[3], {2{~mul_temp_13[3]}}})>>>3;

  assign mul_temp_14 = delay_pipeline[48] * coeff49;
  assign product49 = ({{11{mul_temp_14[23]}}, mul_temp_14[23:0]} + {mul_temp_14[3], {2{~mul_temp_14[3]}}})>>>3;

  assign product48 = $signed({delay_pipeline[47][13:0], 4'b0000});

  assign mul_temp_15 = delay_pipeline[46] * coeff47;
  assign product47 = ({{11{mul_temp_15[23]}}, mul_temp_15[23:0]} + {mul_temp_15[3], {2{~mul_temp_15[3]}}})>>>3;

  assign mul_temp_16 = delay_pipeline[45] * coeff46;
  assign product46 = ({{11{mul_temp_16[23]}}, mul_temp_16[23:0]} + {mul_temp_16[3], {2{~mul_temp_16[3]}}})>>>3;

  assign mul_temp_17 = delay_pipeline[44] * coeff45;
  assign product45 = ({{11{mul_temp_17[23]}}, mul_temp_17[23:0]} + {mul_temp_17[3], {2{~mul_temp_17[3]}}})>>>3;

  assign mul_temp_18 = delay_pipeline[43] * coeff44;
  assign product44 = ({{11{mul_temp_18[23]}}, mul_temp_18[23:0]} + {mul_temp_18[3], {2{~mul_temp_18[3]}}})>>>3;

  assign mul_temp_19 = delay_pipeline[42] * coeff43;
  assign product43 = ({{11{mul_temp_19[23]}}, mul_temp_19[23:0]} + {mul_temp_19[3], {2{~mul_temp_19[3]}}})>>>3;

  assign mul_temp_20 = delay_pipeline[41] * coeff42;
  assign product42 = ({{11{mul_temp_20[23]}}, mul_temp_20[23:0]} + {mul_temp_20[3], {2{~mul_temp_20[3]}}})>>>3;

  assign mul_temp_21 = delay_pipeline[40] * coeff41;
  assign product41 = ({{11{mul_temp_21[23]}}, mul_temp_21[23:0]} + {mul_temp_21[3], {2{~mul_temp_21[3]}}})>>>3;

  assign mul_temp_22 = delay_pipeline[39] * coeff40;
  assign product40 = ({{11{mul_temp_22[23]}}, mul_temp_22[23:0]} + {mul_temp_22[3], {2{~mul_temp_22[3]}}})>>>3;

  assign mul_temp_23 = delay_pipeline[38] * coeff39;
  assign product39 = ({{11{mul_temp_23[23]}}, mul_temp_23[23:0]} + {mul_temp_23[3], {2{~mul_temp_23[3]}}})>>>3;

  assign mul_temp_24 = delay_pipeline[37] * coeff38;
  assign product38 = ({{11{mul_temp_24[23]}}, mul_temp_24[23:0]} + {mul_temp_24[3], {2{~mul_temp_24[3]}}})>>>3;

  assign mul_temp_25 = delay_pipeline[36] * coeff37;
  assign product37 = ({{11{mul_temp_25[23]}}, mul_temp_25[23:0]} + {mul_temp_25[3], {2{~mul_temp_25[3]}}})>>>3;

  assign mul_temp_26 = delay_pipeline[35] * coeff36;
  assign product36 = ({{11{mul_temp_26[23]}}, mul_temp_26[23:0]} + {mul_temp_26[3], {2{~mul_temp_26[3]}}})>>>3;

  assign mul_temp_27 = delay_pipeline[34] * coeff35;
  assign product35 = ({{11{mul_temp_27[23]}}, mul_temp_27[23:0]} + {mul_temp_27[3], {2{~mul_temp_27[3]}}})>>>3;

  assign mul_temp_28 = delay_pipeline[33] * coeff34;
  assign product34 = ({{11{mul_temp_28[23]}}, mul_temp_28[23:0]} + {mul_temp_28[3], {2{~mul_temp_28[3]}}})>>>3;

  assign mul_temp_29 = delay_pipeline[32] * coeff33;
  assign product33 = ({{11{mul_temp_29[23]}}, mul_temp_29[23:0]} + {mul_temp_29[3], {2{~mul_temp_29[3]}}})>>>3;

  assign mul_temp_30 = delay_pipeline[31] * coeff32;
  assign product32 = ({{11{mul_temp_30[23]}}, mul_temp_30[23:0]} + {mul_temp_30[3], {2{~mul_temp_30[3]}}})>>>3;

  assign mul_temp_31 = delay_pipeline[30] * coeff31;
  assign product31 = ({{11{mul_temp_31[23]}}, mul_temp_31[23:0]} + {mul_temp_31[3], {2{~mul_temp_31[3]}}})>>>3;

  assign mul_temp_32 = delay_pipeline[29] * coeff30;
  assign product30 = ({{11{mul_temp_32[23]}}, mul_temp_32[23:0]} + {mul_temp_32[3], {2{~mul_temp_32[3]}}})>>>3;

  assign mul_temp_33 = delay_pipeline[28] * coeff29;
  assign product29 = ({{11{mul_temp_33[23]}}, mul_temp_33[23:0]} + {mul_temp_33[3], {2{~mul_temp_33[3]}}})>>>3;

  assign mul_temp_34 = delay_pipeline[27] * coeff28;
  assign product28 = ({{11{mul_temp_34[23]}}, mul_temp_34[23:0]} + {mul_temp_34[3], {2{~mul_temp_34[3]}}})>>>3;

  assign mul_temp_35 = delay_pipeline[26] * coeff27;
  assign product27 = ({{11{mul_temp_35[23]}}, mul_temp_35[23:0]} + {mul_temp_35[3], {2{~mul_temp_35[3]}}})>>>3;

  assign mul_temp_36 = delay_pipeline[25] * coeff26;
  assign product26 = ({{11{mul_temp_36[23]}}, mul_temp_36[23:0]} + {mul_temp_36[3], {2{~mul_temp_36[3]}}})>>>3;

  assign mul_temp_37 = delay_pipeline[24] * coeff25;
  assign product25 = ({{11{mul_temp_37[23]}}, mul_temp_37[23:0]} + {mul_temp_37[3], {2{~mul_temp_37[3]}}})>>>3;

  assign mul_temp_38 = delay_pipeline[23] * coeff24;
  assign product24 = ({{11{mul_temp_38[23]}}, mul_temp_38[23:0]} + {mul_temp_38[3], {2{~mul_temp_38[3]}}})>>>3;

  assign mul_temp_39 = delay_pipeline[22] * coeff23;
  assign product23 = ({{11{mul_temp_39[23]}}, mul_temp_39[23:0]} + {mul_temp_39[3], {2{~mul_temp_39[3]}}})>>>3;

  assign mul_temp_40 = delay_pipeline[21] * coeff22;
  assign product22 = ({{11{mul_temp_40[23]}}, mul_temp_40[23:0]} + {mul_temp_40[3], {2{~mul_temp_40[3]}}})>>>3;

  assign mul_temp_41 = delay_pipeline[20] * coeff21;
  assign product21 = ({{11{mul_temp_41[23]}}, mul_temp_41[23:0]} + {mul_temp_41[3], {2{~mul_temp_41[3]}}})>>>3;

  assign product20 = $signed({delay_pipeline[19][13:0], 4'b0000});

  assign mul_temp_42 = delay_pipeline[18] * coeff19;
  assign product19 = ({{11{mul_temp_42[23]}}, mul_temp_42[23:0]} + {mul_temp_42[3], {2{~mul_temp_42[3]}}})>>>3;

  assign mul_temp_43 = delay_pipeline[17] * coeff18;
  assign product18 = ({{11{mul_temp_43[23]}}, mul_temp_43[23:0]} + {mul_temp_43[3], {2{~mul_temp_43[3]}}})>>>3;

  assign product17 = $signed({delay_pipeline[16][13:0], 3'b000});

  assign mul_temp_44 = delay_pipeline[15] * coeff16;
  assign product16 = ({{11{mul_temp_44[23]}}, mul_temp_44[23:0]} + {mul_temp_44[3], {2{~mul_temp_44[3]}}})>>>3;

  assign product15 = $signed({delay_pipeline[14][13:0], 2'b00});

  assign mul_temp_45 = delay_pipeline[13] * coeff14;
  assign product14 = ({{11{mul_temp_45[23]}}, mul_temp_45[23:0]} + {mul_temp_45[3], {2{~mul_temp_45[3]}}})>>>3;

  assign mul_temp_46 = delay_pipeline[12] * coeff13;
  assign product13 = ({{11{mul_temp_46[23]}}, mul_temp_46[23:0]} + {mul_temp_46[3], {2{~mul_temp_46[3]}}})>>>3;

  assign product12 = ({{21{delay_pipeline[11][13]}}, delay_pipeline[11][13:0]} + {delay_pipeline[11][3], {2{~delay_pipeline[11][3]}}})>>>3;

  assign mul_temp_47 = delay_pipeline[10] * coeff11;
  assign product11 = ({{11{mul_temp_47[23]}}, mul_temp_47[23:0]} + {mul_temp_47[3], {2{~mul_temp_47[3]}}})>>>3;

  assign mul_temp_48 = delay_pipeline[9] * coeff10;
  assign product10 = ({{11{mul_temp_48[23]}}, mul_temp_48[23:0]} + {mul_temp_48[3], {2{~mul_temp_48[3]}}})>>>3;

  assign mul_temp_49 = delay_pipeline[8] * coeff9;
  assign product9 = ({{11{mul_temp_49[23]}}, mul_temp_49[23:0]} + {mul_temp_49[3], {2{~mul_temp_49[3]}}})>>>3;

  assign mul_temp_50 = delay_pipeline[7] * coeff8;
  assign product8 = ({{11{mul_temp_50[23]}}, mul_temp_50[23:0]} + {mul_temp_50[3], {2{~mul_temp_50[3]}}})>>>3;

  assign mul_temp_51 = delay_pipeline[6] * coeff7;
  assign product7 = ({{11{mul_temp_51[23]}}, mul_temp_51[23:0]} + {mul_temp_51[3], {2{~mul_temp_51[3]}}})>>>3;

  assign mul_temp_52 = delay_pipeline[5] * coeff6;
  assign product6 = ({{11{mul_temp_52[23]}}, mul_temp_52[23:0]} + {mul_temp_52[3], {2{~mul_temp_52[3]}}})>>>3;

  assign mul_temp_53 = delay_pipeline[4] * coeff5;
  assign product5 = ({{11{mul_temp_53[23]}}, mul_temp_53[23:0]} + {mul_temp_53[3], {2{~mul_temp_53[3]}}})>>>3;

  assign mul_temp_54 = delay_pipeline[3] * coeff4;
  assign product4 = ({{11{mul_temp_54[23]}}, mul_temp_54[23:0]} + {mul_temp_54[3], {2{~mul_temp_54[3]}}})>>>3;

  assign mul_temp_55 = delay_pipeline[2] * coeff3;
  assign product3 = ({{11{mul_temp_55[23]}}, mul_temp_55[23:0]} + {mul_temp_55[3], {2{~mul_temp_55[3]}}})>>>3;

  assign mulpwr2_temp_1 = (delay_pipeline[1]==14'b10000000000000) ? $signed({1'b0, delay_pipeline[1]}) : -delay_pipeline[1];

  assign product2 = $signed({{17{mulpwr2_temp_1[14]}}, mulpwr2_temp_1});

  assign product1_cast = product1;

  assign mul_temp_56 = delay_pipeline[0] * coeff1;
  assign product1 = ({{11{mul_temp_56[23]}}, mul_temp_56[23:0]} + {mul_temp_56[3], {2{~mul_temp_56[3]}}})>>>3;

  assign add_signext = product1_cast;
  assign add_signext_1 = product2;
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[31:0];

  assign add_signext_2 = sum1;
  assign add_signext_3 = product3;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[31:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = product4;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[31:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = product5;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[31:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = product6;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[31:0];

  assign add_signext_10 = sum5;
  assign add_signext_11 = product7;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[31:0];

  assign add_signext_12 = sum6;
  assign add_signext_13 = product8;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[31:0];

  assign add_signext_14 = sum7;
  assign add_signext_15 = product9;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[31:0];

  assign add_signext_16 = sum8;
  assign add_signext_17 = product10;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum9 = add_temp_8[31:0];

  assign add_signext_18 = sum9;
  assign add_signext_19 = product11;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum10 = add_temp_9[31:0];

  assign add_signext_20 = sum10;
  assign add_signext_21 = product12;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum11 = add_temp_10[31:0];

  assign add_signext_22 = sum11;
  assign add_signext_23 = product13;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum12 = add_temp_11[31:0];

  assign add_signext_24 = sum12;
  assign add_signext_25 = product14;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum13 = add_temp_12[31:0];

  assign add_signext_26 = sum13;
  assign add_signext_27 = product15;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum14 = add_temp_13[31:0];

  assign add_signext_28 = sum14;
  assign add_signext_29 = product16;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum15 = add_temp_14[31:0];

  assign add_signext_30 = sum15;
  assign add_signext_31 = product17;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum16 = add_temp_15[31:0];

  assign add_signext_32 = sum16;
  assign add_signext_33 = product18;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum17 = add_temp_16[31:0];

  assign add_signext_34 = sum17;
  assign add_signext_35 = product19;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum18 = add_temp_17[31:0];

  assign add_signext_36 = sum18;
  assign add_signext_37 = product20;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum19 = add_temp_18[31:0];

  assign add_signext_38 = sum19;
  assign add_signext_39 = product21;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum20 = add_temp_19[31:0];

  assign add_signext_40 = sum20;
  assign add_signext_41 = product22;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum21 = add_temp_20[31:0];

  assign add_signext_42 = sum21;
  assign add_signext_43 = product23;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum22 = add_temp_21[31:0];

  assign add_signext_44 = sum22;
  assign add_signext_45 = product24;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum23 = add_temp_22[31:0];

  assign add_signext_46 = sum23;
  assign add_signext_47 = product25;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum24 = add_temp_23[31:0];

  assign add_signext_48 = sum24;
  assign add_signext_49 = product26;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum25 = add_temp_24[31:0];

  assign add_signext_50 = sum25;
  assign add_signext_51 = product27;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum26 = add_temp_25[31:0];

  assign add_signext_52 = sum26;
  assign add_signext_53 = product28;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum27 = add_temp_26[31:0];

  assign add_signext_54 = sum27;
  assign add_signext_55 = product29;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum28 = add_temp_27[31:0];

  assign add_signext_56 = sum28;
  assign add_signext_57 = product30;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum29 = add_temp_28[31:0];

  assign add_signext_58 = sum29;
  assign add_signext_59 = product31;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum30 = add_temp_29[31:0];

  assign add_signext_60 = sum30;
  assign add_signext_61 = product32;
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sum31 = add_temp_30[31:0];

  assign add_signext_62 = sum31;
  assign add_signext_63 = product33;
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sum32 = add_temp_31[31:0];

  assign add_signext_64 = sum32;
  assign add_signext_65 = product34;
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sum33 = add_temp_32[31:0];

  assign add_signext_66 = sum33;
  assign add_signext_67 = product35;
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sum34 = add_temp_33[31:0];

  assign add_signext_68 = sum34;
  assign add_signext_69 = product36;
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sum35 = add_temp_34[31:0];

  assign add_signext_70 = sum35;
  assign add_signext_71 = product37;
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sum36 = add_temp_35[31:0];

  assign add_signext_72 = sum36;
  assign add_signext_73 = product38;
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sum37 = add_temp_36[31:0];

  assign add_signext_74 = sum37;
  assign add_signext_75 = product39;
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sum38 = add_temp_37[31:0];

  assign add_signext_76 = sum38;
  assign add_signext_77 = product40;
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sum39 = add_temp_38[31:0];

  assign add_signext_78 = sum39;
  assign add_signext_79 = product41;
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sum40 = add_temp_39[31:0];

  assign add_signext_80 = sum40;
  assign add_signext_81 = product42;
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sum41 = add_temp_40[31:0];

  assign add_signext_82 = sum41;
  assign add_signext_83 = product43;
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sum42 = add_temp_41[31:0];

  assign add_signext_84 = sum42;
  assign add_signext_85 = product44;
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sum43 = add_temp_42[31:0];

  assign add_signext_86 = sum43;
  assign add_signext_87 = product45;
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sum44 = add_temp_43[31:0];

  assign add_signext_88 = sum44;
  assign add_signext_89 = product46;
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sum45 = add_temp_44[31:0];

  assign add_signext_90 = sum45;
  assign add_signext_91 = product47;
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sum46 = add_temp_45[31:0];

  assign add_signext_92 = sum46;
  assign add_signext_93 = product48;
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sum47 = add_temp_46[31:0];

  assign add_signext_94 = sum47;
  assign add_signext_95 = product49;
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sum48 = add_temp_47[31:0];

  assign add_signext_96 = sum48;
  assign add_signext_97 = product50;
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sum49 = add_temp_48[31:0];

  assign add_signext_98 = sum49;
  assign add_signext_99 = product51;
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sum50 = add_temp_49[31:0];

  assign add_signext_100 = sum50;
  assign add_signext_101 = product52;
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sum51 = add_temp_50[31:0];

  assign add_signext_102 = sum51;
  assign add_signext_103 = product53;
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sum52 = add_temp_51[31:0];

  assign add_signext_104 = sum52;
  assign add_signext_105 = product54;
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sum53 = add_temp_52[31:0];

  assign add_signext_106 = sum53;
  assign add_signext_107 = product55;
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sum54 = add_temp_53[31:0];

  assign add_signext_108 = sum54;
  assign add_signext_109 = product56;
  assign add_temp_54 = add_signext_108 + add_signext_109;
  assign sum55 = add_temp_54[31:0];

  assign add_signext_110 = sum55;
  assign add_signext_111 = product57;
  assign add_temp_55 = add_signext_110 + add_signext_111;
  assign sum56 = add_temp_55[31:0];

  assign add_signext_112 = sum56;
  assign add_signext_113 = product58;
  assign add_temp_56 = add_signext_112 + add_signext_113;
  assign sum57 = add_temp_56[31:0];

  assign add_signext_114 = sum57;
  assign add_signext_115 = product59;
  assign add_temp_57 = add_signext_114 + add_signext_115;
  assign sum58 = add_temp_57[31:0];

  assign add_signext_116 = sum58;
  assign add_signext_117 = product60;
  assign add_temp_58 = add_signext_116 + add_signext_117;
  assign sum59 = add_temp_58[31:0];

  assign add_signext_118 = sum59;
  assign add_signext_119 = product61;
  assign add_temp_59 = add_signext_118 + add_signext_119;
  assign sum60 = add_temp_59[31:0];

  assign add_signext_120 = sum60;
  assign add_signext_121 = product62;
  assign add_temp_60 = add_signext_120 + add_signext_121;
  assign sum61 = add_temp_60[31:0];

  assign add_signext_122 = sum61;
  assign add_signext_123 = product63;
  assign add_temp_61 = add_signext_122 + add_signext_123;
  assign sum62 = add_temp_61[31:0];

  assign add_signext_124 = sum62;
  assign add_signext_125 = product64;
  assign add_temp_62 = add_signext_124 + add_signext_125;
  assign sum63 = add_temp_62[31:0];

  assign add_signext_126 = sum63;
  assign add_signext_127 = product65;
  assign add_temp_63 = add_signext_126 + add_signext_127;
  assign sum64 = add_temp_63[31:0];

  assign add_signext_128 = sum64;
  assign add_signext_129 = product66;
  assign add_temp_64 = add_signext_128 + add_signext_129;
  assign sum65 = add_temp_64[31:0];

  assign add_signext_130 = sum65;
  assign add_signext_131 = product67;
  assign add_temp_65 = add_signext_130 + add_signext_131;
  assign sum66 = add_temp_65[31:0];

  assign output_typeconvert = (sum66[23:0] + {sum66[10], {9{~sum66[10]}}})>>>10;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // LPF_20kHz_fs1_8MHz
